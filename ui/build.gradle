apply plugin: 'kotlin-multiplatform'

kotlin {
    targets {
        if (project.property("lanark.sdl2.enable") == "true") {
            fromPreset(presets.macosX64, 'sdl2macos') {
                compilations.main {
                    buildTypes = [DEBUG]
                }
            }
            if (project.property("lanark.sdl2.ios") == "true") {
                fromPreset(presets.iosArm64, 'sdl2ios') {
                    compilations.main {
                        buildTypes = [DEBUG]
                    }
                }

                fromPreset(presets.iosX64, 'sdl2isim') {
                    compilations.main {
                        buildTypes = [DEBUG]
                    }
                }
            }
        }

        fromPreset(presets.jvm, 'lwjgl')
        fromPreset(presets.js, 'webgl')

        configure([lwjgl]) {
            tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

    sourceSets {
        commonMain {
            kotlin.srcDirs = ["common"]
            dependencies {
                implementation project(":core")
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
        commonTest {
            kotlin.srcDirs = ["test"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        if (project.property("lanark.sdl2.enable") == "true") {
            sdl2macosMain {
            }
            if (project.property("lanark.sdl2.ios") == "true") {
                sdl2iosMain {
                    if (System.getProperty("idea.active") != "true") {
                        // kotlin.srcDirs = ["sdl2"]
                    } else {
                        dependsOn.clear()
                    }
                }
                sdl2isimMain {
                    if (System.getProperty("idea.active") != "true") {
                        // kotlin.srcDirs = ["sdl2"]
                    } else {
                        dependsOn.clear()
                    }
                }
            }
        }
    }
}

kotlin.targets.all {
    compilations.all { compilation ->
        tasks.getByName(compilation.compileKotlinTaskName) {
            kotlinOptions.freeCompilerArgs = ["-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
        }
    }
}
