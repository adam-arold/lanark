apply plugin: 'kotlin-multiplatform'

kotlin {
    targets {
        fromPreset(presets.macosX64, 'sdl2macos') {
            compilations.main {
                outputKinds = [EXECUTABLE]
            }
        }

        fromPreset(presets.iosX64, 'sdl2ios') {
            compilations.main {
                outputKinds = [EXECUTABLE]
                extraOpts "-nomain"
            }
        }

        fromPreset(presets.jvm, 'lwjgl')
        
        configure([lwjgl]) {
            tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

    sourceSets {
        commonMain {
            kotlin.srcDirs = ["common"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation project(":core")
                implementation project(":ui")
            }
        }
        commonTest {
            kotlin.srcDirs = ["test"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        sdl2macosMain {
            kotlin.srcDirs = ["sdl2"]
            resources.srcDirs = ["resources"]
        }
        sdl2iosMain {
            dependsOn sdl2macosMain
        }

        lwjglMain {
            kotlin.srcDirs = ["lwjgl"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-reflect'
            }
        }
    }
}

kotlin.targets.all {
    compilations.all { compilation ->
        tasks.getByName(compilation.compileKotlinTaskName) {
            kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
        }
    }
}

afterEvaluate {
    kotlin.targets.sdl2macos.compilations.main.getLinkTask("EXECUTABLE", "DEBUG").doLast { task ->
        copy {
            from file('resources')
            into task.outputFile.get().parent
        }
    }
}

task startSimulator(type: Exec) {
    executable "sh"
    args "-c", 'open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app'
    // TODO: Wait for it to start 
    // xcrun simctl list | grep Booted | wc -l 
}

task shutdownSimulator(type: Exec) {
    executable "sh"
    args "-c", "xcrun simctl shutdown booted"
}

afterEvaluate {
    task runDebugExecutableSdl2macos(type: Exec, dependsOn: [linkDebugExecutableSdl2macos]) {
        executable linkDebugExecutableSdl2macos.outputFile.get()
    }

    task bundleDebugExecutableSdl2ios(type: Copy, dependsOn: [linkDebugExecutableSdl2ios]) {
        from linkDebugExecutableSdl2ios.outputFile.get()
        from file('resources')
        into file("build/${project.name}.app/")
    }

    task compilePlistDebugExecutableSdl2ios(type: Exec, dependsOn: [bundleDebugExecutableSdl2ios]) {
        def appId = linkDebugExecutableSdl2ios.outputFile.get().name
        doFirst {
            println "Compiling Info.plist for `$appId`…"
        }
        def appFolder = bundleDebugExecutableSdl2ios.destinationDir
        executable "sh"
        args "-c", "plutil -convert binary1 $appFolder/Info.plist"
    }



    task installDebugExecutableSdl2ios(type: Exec, dependsOn: [bundleDebugExecutableSdl2ios]) {
        def appId = linkDebugExecutableSdl2ios.outputFile.get().name
        doFirst {
            println "Installing `$appId` on a simulator…"
        }
        executable "sh"

        def appFolder = bundleDebugExecutableSdl2ios.destinationDir
        args "-c", "xcrun simctl install booted '${appFolder.absolutePath}'"

        doLast {
            exec {
                executable "sh"
                args "-c", 'echo "Installed to" $(xcrun simctl get_app_container booted ' + appId + ' bundle)'
            }
        }

        // Local folder where app is installed 
        // open `xcrun simctl get_app_container booted BUNDLEID_OF_YOUR_APP data` -a Finder
    }

    task runDebugExecutableSdl2ios(type: Exec, dependsOn: [installDebugExecutableSdl2ios, startSimulator]) {
        def appId = linkDebugExecutableSdl2ios.outputFile.get().name
        doFirst {
            println "Starting `$appId` on a simulator…"
        }

        executable "sh"
        args "-c", "xcrun simctl launch --console-pty booted $appId"
    }
}