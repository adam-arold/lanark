apply plugin: 'kotlin-multiplatform'

kotlin {
    targets {
        if (project.property("lanark.sdl2.enable") != "false") {
            fromPreset(presets.macosX64, 'sdl2macos') {
                compilations.main {
                    outputKinds = [EXECUTABLE]
                    linkerOpts += ["-macosx_version_min 10.13"]
                }
            }

            fromPreset(presets.iosX64, 'sdl2isim') {
                compilations.main {
                    outputKinds = [EXECUTABLE]
                    linkerOpts += ["-ios_simulator_version_min 11.0"]
                    extraOpts "-nomain"
                }
            }
            fromPreset(presets.iosArm64, 'sdl2ios') {
                compilations.main {
                    outputKinds = [EXECUTABLE]
                    linkerOpts += ["-ios_version_min 11.0"]
                    extraOpts "-nomain"
                }
            }
        }
        
        fromPreset(presets.jvm, 'lwjgl')
        
        configure([lwjgl]) {
            tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

    sourceSets {
        commonMain {
            kotlin.srcDirs = ["common"]
            resources.srcDirs = ["resources"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation project(":core")
                implementation project(":ui")
            }
        }
        commonTest {
            kotlin.srcDirs = ["test"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        if (project.property("lanark.sdl2.enable") != "false") {
            sdl2macosMain {
                kotlin.srcDirs = ["sdl2"]
            }
            sdl2iosMain {
                dependsOn sdl2macosMain
            }
            sdl2isimMain {
                dependsOn sdl2macosMain
            }
        }

        lwjglMain {
            kotlin.srcDirs = ["lwjgl"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-reflect'
            }
        }
    }
}

kotlin.targets.all {
    compilations.all { compilation ->
        tasks.getByName(compilation.compileKotlinTaskName) {
            kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
        }
    }
}

if (project.property("lanark.sdl2.enable") != "false") {
    afterEvaluate {
        kotlin.targets.sdl2macos.compilations.main.getLinkTask("EXECUTABLE", "DEBUG").doLast { task ->
            copy {
                from file('resources')
                into task.outputFile.get().parent
            }
        }
    }
}

task startSimulator(type: Exec) {
    executable "sh"
    args "-c", 'open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app'
    // TODO: Wait for it to start 
    // xcrun simctl list | grep Booted | wc -l 
}

task shutdownSimulator(type: Exec) {
    executable "sh"
    args "-c", "xcrun simctl shutdown booted"
}

if (project.property("lanark.sdl2.enable") != "false") {

    afterEvaluate {
        task runDebugExecutableSdl2macos(type: Exec, dependsOn: [linkDebugExecutableSdl2macos]) {
            executable linkDebugExecutableSdl2macos.outputFile.get()
        }

        task resourcesDebugExecutableSdl2ios(type: Copy, dependsOn: [linkDebugExecutableSdl2ios]) {
            def target = linkDebugExecutableSdl2ios.target
            from linkDebugExecutableSdl2ios.outputFile.get()
            from file('resources')
            into file("build/bundle/$target/${project.name}.app/")
        }

        task bundleDebugExecutableSdl2ios(type: Copy, dependsOn: [resourcesDebugExecutableSdl2ios]) {
            def target = linkDebugExecutableSdl2ios.target
            // add the following to your local.properties file
            // apple_application_id=lanark.playground
            // apple_team_id=<your apple TeamID>
            expand(project.properties)
            from file('iosBundleFiles')
            into file("build/bundle/$target/${project.name}.app/")
        }
        
        task compilePlistDebugExecutableSdl2ios(type: Exec, dependsOn: [bundleDebugExecutableSdl2ios]) {
            def appId = linkDebugExecutableSdl2ios.outputFile.get().name
            doFirst {
                println "Compiling Info.plist for `$appId`…"
            }
            def appFolder = bundleDebugExecutableSdl2ios.destinationDir
            executable "sh"
            args "-c", "plutil -convert binary1 $appFolder/Info.plist"
        }

        task signDebugExecutableSdl2ios(type: Exec, dependsOn: [compilePlistDebugExecutableSdl2ios]) {
            def appFolder = bundleDebugExecutableSdl2ios.destinationDir
            // run "security find-identity -pcodesigning -v" to find your apple.identity and put it into local.properties
            def identity = project.property("apple.identity")
            executable "sh"
            args "-c", "codesign -s $identity --entitlements $appFolder/Entitlements.plist $appFolder"
        }

        task installDebugExecutableSdl2ios(type: Exec, dependsOn: [bundleDebugExecutableSdl2ios]) {
            def appId = linkDebugExecutableSdl2ios.outputFile.get().name
            doFirst {
                println "Installing `$appId` on a simulator…"
            }
            executable "sh"

            def appFolder = bundleDebugExecutableSdl2ios.destinationDir
            args "-c", "xcrun simctl install booted '${appFolder.absolutePath}'"

            doLast {
                exec {
                    executable "sh"
                    args "-c", 'echo "Installed to" $(xcrun simctl get_app_container booted ' + appId + ' bundle)'
                }
            }

            // Local folder where app is installed 
            // open `xcrun simctl get_app_container booted BUNDLEID_OF_YOUR_APP data` -a Finder
        }

        task runDebugExecutableSdl2ios(type: Exec, dependsOn: [installDebugExecutableSdl2ios, startSimulator]) {
            def appId = linkDebugExecutableSdl2ios.outputFile.get().name
            doFirst {
                println "Starting `$appId` on a simulator…"
            }

            executable "sh"
            args "-c", "xcrun simctl launch --console-pty booted $appId"
        }
    }
}