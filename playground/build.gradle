apply plugin: 'kotlin-multiplatform'

kotlin {
    targets {
        fromPreset(presets.macosX64, 'sdl2macos') {
            compilations.main {
                outputKinds = [EXECUTABLE]
            }
            compilations.all { compilation ->
                linkerOpts "-L/usr/local/opt/sdl2/lib -L/usr/local/opt/sdl2_image/lib -L/usr/local/opt/sdl2_mixer/lib -lsdl2 -lsdl2_image -lsdl2_mixer"
            }
        }
    }
    
    sourceSets {
        commonMain {
            kotlin.srcDirs += "common"
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation project(":core")
                implementation project(":ui")
            }
        }
        commonTest {
            kotlin.srcDirs += "test"
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        sdl2macosMain {
            kotlin.srcDirs += "sdl2"
            dependencies {
                implementation project(":core")
            }
        }
    }
}

kotlin.targets.all {
    compilations.all { compilation ->
        tasks.getByName(compilation.compileKotlinTaskName) {
            kotlinOptions.freeCompilerArgs = ["-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
        }
    }
}

afterEvaluate {
    kotlin.targets.sdl2macos.compilations.main.getLinkTask("EXECUTABLE", "DEBUG").doLast { task ->
        copy {
            from file('resources')
            into task.outputFile.get().parent
        }
    }
}

afterEvaluate {
    def linkTask = kotlin.targets.sdl2macos.compilations.main.getLinkTask("EXECUTABLE", "DEBUG")
    task run(type: Exec) {
        dependsOn(linkTask)
        def outputArtifact = linkTask.outputFile.get()
        commandLine "$outputArtifact"
    }
}
