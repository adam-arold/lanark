apply plugin: 'kotlin-multiplatform'

kotlin {
    targets {
        fromPreset(presets.macosX64, 'sdl2macos') {
            compilations.main {
                outputKinds = [EXECUTABLE]
                linkerOpts '-framework ApplicationServices -framework Cocoa -framework Carbon -framework CoreGraphics -framework CoreAudio -framework AudioToolbox -framework Foundation -framework ForceFeedback -framework OpenGL -framework ImageIO -framework IOKit -weak_framework QuartzCore -weak_framework Metal'
            }
        }

        fromPreset(presets.iosX64, 'sdl2ios') {
            compilations.main {
                outputKinds = [EXECUTABLE]
                linkerOpts '-framework AVFoundation -framework CoreGraphics -framework AudioToolbox -framework CoreMotion -framework Foundation -framework GameController -framework OpenGLES -framework UIKit -framework CoreBluetooth -framework ImageIO -framework CoreServices -weak_framework QuartzCore -weak_framework Metal'
            }
        }

        fromPreset(presets.jvm, 'lwjgl')
        configure([lwjgl]) {
            tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

    sourceSets {
        commonMain {
            kotlin.srcDirs = ["common"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation project(":core")
                implementation project(":ui")
            }
        }
        commonTest {
            kotlin.srcDirs = ["test"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        sdl2macosMain {
            kotlin.srcDirs = ["sdl2"]
            resources.srcDirs = ["resources"]
        }
        sdl2iosMain {
            dependsOn sdl2macosMain
        }

        lwjglMain {
            kotlin.srcDirs = ["lwjgl"]
        }
    }
}

kotlin.targets.all {
    compilations.all { compilation ->
        tasks.getByName(compilation.compileKotlinTaskName) {
            kotlinOptions.freeCompilerArgs = ["-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
        }
    }
}

afterEvaluate {
    kotlin.targets.sdl2macos.compilations.main.getLinkTask("EXECUTABLE", "DEBUG").doLast { task ->
        copy {
            from file('resources')
            into task.outputFile.get().parent
        }
    }
}

afterEvaluate {
    def linkTask = kotlin.targets.sdl2macos.compilations.main.getLinkTask("EXECUTABLE", "DEBUG")
    task sdl2Run(type: Exec) {
        dependsOn(linkTask)
        def outputArtifact = linkTask.outputFile.get()
        commandLine "$outputArtifact"
    }
}

def xcodeProject = project.name
def fqn = ""
task startSimulator(type: Exec) {
    workingDir '.'
    executable "sh"
    args "-c", 'open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app'
}

task shutdownSimulator(type: Exec) {
    workingDir '.'
    executable "sh"
    args "-c", "xcrun simctl shutdown booted"
}

task buildXcode(type: Exec, dependsOn: [build, startSimulator]) {
    workingDir file(xcodeProject + ".xcodeproj")
    executable "sh"
    args "-c", "xcrun xcodebuild -scheme $xcodeProject -project . -configuration Debug -destination 'platform=iOS Simulator,name=iPhone X,OS=latest' -derivedDataPath build"
}

task installSimulator(type: Exec, dependsOn: [buildXcode]) {
    workingDir file(".")
    executable "sh"

    def appFolder = file(xcodeProject + ".xcodeproj/build/Build/Products/Debug-iphonesimulator/" + xcodeProject + ".app")
    args "-c", "xcrun simctl install booted '${appFolder.absolutePath}'"
}

task launchSimulator(type: Exec, dependsOn: [installSimulator]) {
    workingDir file(xcodeProject + ".xcodeproj")
    executable "sh"
    args "-c", "xcrun simctl launch booted $fqn"
}