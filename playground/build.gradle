apply plugin: 'kotlin-multiplatform'

kotlin {
    targets {
        fromPreset(presets.macosX64, 'sdl2macos') {
            compilations.main {
                outputKinds = [EXECUTABLE]
                linkerOpts '-framework ApplicationServices -framework Cocoa -framework Carbon -framework CoreGraphics -framework CoreAudio -framework AudioToolbox -framework Foundation -framework ForceFeedback -framework OpenGL -framework ImageIO -framework IOKit -weak_framework QuartzCore -weak_framework Metal'
            }
        }

        fromPreset(presets.iosX64, 'sdl2ios') {
            compilations.main {
                outputKinds = [EXECUTABLE]
                linkerOpts '-framework AVFoundation -framework CoreGraphics -framework AudioToolbox -framework CoreMotion -framework Foundation -framework GameController -framework OpenGLES -framework UIKit -framework CoreBluetooth -framework ImageIO -framework CoreServices -weak_framework QuartzCore -weak_framework Metal'
            }
        }

        fromPreset(presets.jvm, 'lwjgl')
        configure([lwjgl]) {
            tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

    sourceSets {
        commonMain {
            kotlin.srcDirs = ["common"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation project(":core")
                implementation project(":ui")
            }
        }
        commonTest {
            kotlin.srcDirs = ["test"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        sdl2macosMain {
            kotlin.srcDirs = ["sdl2"]
            resources.srcDirs = ["resources"]
        }
        sdl2iosMain {
            dependsOn sdl2macosMain
        }

        lwjglMain {
            kotlin.srcDirs = ["lwjgl"]
        }
    }
}

kotlin.targets.all {
    compilations.all { compilation ->
        tasks.getByName(compilation.compileKotlinTaskName) {
            kotlinOptions.freeCompilerArgs = ["-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
        }
    }
}

afterEvaluate {
    kotlin.targets.sdl2macos.compilations.main.getLinkTask("EXECUTABLE", "DEBUG").doLast { task ->
        copy {
            from file('resources')
            into task.outputFile.get().parent
        }
    }
}

afterEvaluate {
    task runDebugExecutableSdl2macos(type: Exec, dependsOn: [linkDebugExecutableSdl2macos]) {
        executable linkDebugExecutableSdl2macos.outputFile.get()
    }

    task bundleDebugExecutableSdl2ios(type: Copy, dependsOn: [linkDebugExecutableSdl2ios]) {
        from linkDebugExecutableSdl2ios.outputFile.get()
        from file('resources')
        into file("build/${project.name}.app/")
    }

    task installDebugExecutableSdl2ios(type: Exec, dependsOn: [bundleDebugExecutableSdl2ios]) {
        executable "sh"

        def appFolder = bundleDebugExecutableSdl2ios.destinationDir
        args "-c", "xcrun simctl install booted '${appFolder.absolutePath}'"
    }

    task runDebugExecutableSdl2ios(type: Exec, dependsOn: [installDebugExecutableSdl2ios]) {
        executable "sh"
        def appId = project.name + ".kexe"
        args "-c", "xcrun simctl launch booted $appId --console"
    }

    task startSimulator(type: Exec) {
        executable "sh"
        args "-c", 'open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app'
        // TODO: Wait for it to start 
        // xcrun simctl list | grep Booted | wc -l 
    }

    task shutdownSimulator(type: Exec) {
        executable "sh"
        args "-c", "xcrun simctl shutdown booted"
    }

}