apply plugin: 'kotlin-multiplatform'

kotlin {
    targets {
        fromPreset(presets.macosX64, 'sdl2macos') {
            compilations.main {
                cinterops {
                    sdl {
                        defFile = file("sdl2/sdl2.def")
                        includeDirs '/usr/local/opt/sdl2/include/SDL2'
                        includeDirs '/usr/local/opt/sdl2_image/include/SDL2'
                        includeDirs '/usr/local/opt/sdl2_mixer/include/SDL2'
                    }
                }
            }
            compilations.all { compilation ->
                linkerOpts "-L/usr/local/opt/sdl2/lib -L/usr/local/opt/sdl2_image/lib -L/usr/local/opt/sdl2_mixer/lib -lsdl2 -lsdl2_image -lsdl2_mixer"
            }
        }

        fromPreset(presets.jvm, 'lwjgl')
    }

    sourceSets {
        commonMain {
            kotlin.srcDirs = ["common"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
        commonTest {
            kotlin.srcDirs = ["commonTest"]
            resources.srcDirs = ["testResources"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        sdl2macosMain {
            kotlin.srcDirs = ["sdl2"]
            resources.srcDirs = ["sdl2Resources"]
            dependencies {
                api 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native_debug_macos_x64:0.26.1-eap13'
                api 'org.jetbrains.kotlinx:atomicfu-native_debug_macos_x64:0.11.7-eap13'
            }
        }

        sdl2macosTest {
        }

        lwjglMain {
            kotlin.srcDirs = ["lwjgl"]
            dependencies {
                api "org.lwjgl:lwjgl:$lwjglVersion"
                api "org.lwjgl:lwjgl-assimp:$lwjglVersion"
                api "org.lwjgl:lwjgl-glfw:$lwjglVersion"
                api "org.lwjgl:lwjgl-openal:$lwjglVersion"
                api "org.lwjgl:lwjgl-opengl:$lwjglVersion"
                api "org.lwjgl:lwjgl-stb:$lwjglVersion"
                api "org.lwjgl:lwjgl:$lwjglVersion:$lwjglNatives"
                api "org.lwjgl:lwjgl-assimp:$lwjglVersion:$lwjglNatives"
                api "org.lwjgl:lwjgl-glfw:$lwjglVersion:$lwjglNatives"
                api "org.lwjgl:lwjgl-openal:$lwjglVersion:$lwjglNatives"
                api "org.lwjgl:lwjgl-opengl:$lwjglVersion:$lwjglNatives"
                api "org.lwjgl:lwjgl-stb:$lwjglVersion:$lwjglNatives"
            }
        }

        lwjglTest {
            kotlin.srcDirs = ["lwjglTest"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
    }
}

kotlin.targets.all {
    compilations.all { compilation ->
        tasks.getByName(compilation.compileKotlinTaskName) {
            kotlinOptions.freeCompilerArgs = ["-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
        }
    }
}

afterEvaluate {
    kotlin.targets.sdl2macos.compilations.test.getLinkTask("EXECUTABLE", "DEBUG").doLast { task ->
        copy {
            from file('testResources')
            into task.outputFile.get().parent
        }
    }
}
