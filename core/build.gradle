apply plugin: 'kotlin-multiplatform'

kotlin {
    targets {
        if (project.property("lanark.sdl2.enable") != "false") {
            fromPreset(presets.macosX64, 'sdl2macos') {
                compilations.main {
                    extraOpts '-Xdisable', 'devirtualization'
                    cinterops {
                        sdl {
                            defFile = file("sdl2/sdl2.def")
                        }
                    }
                }
            }

            fromPreset(presets.iosX64, 'sdl2ios') {
                compilations.main {
                    extraOpts '-Xdisable', 'devirtualization'
                    cinterops {
                        sdl {
                            defFile = file("sdl2/sdl2.def")
                        }
                    }
                }
            }
        }

        fromPreset(presets.jvm, 'lwjgl')

        configure([lwjgl]) {
            tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
                jvmTarget = '1.8'
            }
            tasks.getByName(compilations.test.compileKotlinTaskName).kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

    sourceSets {
        commonMain {
            kotlin.srcDirs = ["common"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
        commonTest {
            kotlin.srcDirs = ["commonTest"]
            resources.srcDirs = ["testResources"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        if (project.property("lanark.sdl2.enable") != "false") {
            sdl2macosMain {
                kotlin.srcDirs = ["sdl2"]
                resources.srcDirs = ["sdl2Resources"]
            }
            sdl2iosMain {
                kotlin.srcDirs = ["sdl2"]
                resources.srcDirs = ["sdl2Resources"]
            }

            sdl2macosTest {
            }
        }

        lwjglMain {
            kotlin.srcDirs = ["lwjgl"]
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

                api "org.lwjgl:lwjgl:$lwjglVersion"
                api "org.lwjgl:lwjgl-assimp:$lwjglVersion"
                api "org.lwjgl:lwjgl-glfw:$lwjglVersion"
                api "org.lwjgl:lwjgl-openal:$lwjglVersion"
                api "org.lwjgl:lwjgl-opengl:$lwjglVersion"
                api "org.lwjgl:lwjgl-stb:$lwjglVersion"
                api "org.lwjgl:lwjgl:$lwjglVersion:$lwjglNatives"
                api "org.lwjgl:lwjgl-assimp:$lwjglVersion:$lwjglNatives"
                api "org.lwjgl:lwjgl-glfw:$lwjglVersion:$lwjglNatives"
                api "org.lwjgl:lwjgl-openal:$lwjglVersion:$lwjglNatives"
                api "org.lwjgl:lwjgl-opengl:$lwjglVersion:$lwjglNatives"
                api "org.lwjgl:lwjgl-stb:$lwjglVersion:$lwjglNatives"
            }
        }

        lwjglTest {
            kotlin.srcDirs = ["lwjglTest"]
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
    }
}

kotlin.targets.all {
    compilations.all { compilation ->
        tasks.getByName(compilation.compileKotlinTaskName) {
            kotlinOptions.freeCompilerArgs = ["-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
        }
    }
}

if (project.property("lanark.sdl2.enable") != "false") {
    afterEvaluate {
        kotlin.targets.sdl2macos.compilations.test.getLinkTask("EXECUTABLE", "DEBUG").doLast { task ->
            copy {
                from file('testResources')
                into task.outputFile.get().parent
            }
        }
    }
}